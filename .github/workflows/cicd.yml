name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-south-1
  AWS_DEFAULT_REGION: ap-south-1
  ECR_REPOSITORY: github-actions-app
  HELM_CHART_PATH: ./helm/github-actions-app
  SONAR_PROJECT_KEY: DevOps-Colony_Github-Actions-Project
  SONAR_ORGANIZATION: DevOps-Colony
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Set up Java (for SonarCloud)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest tests/

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: table
          exit-code: 0
          ignore-unfixed: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ env.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ env.SONAR_ORGANIZATION }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Create Backend Bucket & Table (One-time)
        working-directory: ./infra/modules/s3-backend
        run: |
          terraform init
          terraform apply -auto-approve \
            -var="bucket_name=github-actions-project-tfstate" \
            -var="dynamodb_table=github-actions-project-locks"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Deploy Infrastructure
        working-directory: ./infra/environments/staging
        run: |
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.ECR_REPOSITORY }}:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.29.0

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name flask-app-cluster-staging --region ${{ env.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy with Helm
        run: |
          helm upgrade --install github-actions-app ${{ env.HELM_CHART_PATH }} \
            --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.ECR_REPOSITORY }} \
            --set image.tag=latest \
            --namespace default

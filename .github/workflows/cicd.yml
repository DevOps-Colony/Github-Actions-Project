name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-south-1
  AWS_DEFAULT_REGION: ap-south-1
  ECR_REPOSITORY: github-actions-app
  HELM_CHART_PATH: ./helm/github-actions-app
  SONAR_PROJECT_KEY: DevOps-Colony_Github-Actions-Project
  SONAR_ORGANIZATION: DevOps-Colony

jobs:
  bootstrap_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Apply (Create S3 & DynamoDB)
        working-directory: ./infra/bootstrap
        run: |
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}

  provision_terraform:
    runs-on: ubuntu-latest
    needs: bootstrap_backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Apply
        working-directory: ./infra/environments/staging
        run: |
          terraform init -upgrade
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}

  compile:
    runs-on: ubuntu-latest
    needs: provision_terraform
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn compile

  security-check:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Trivy FS Scan
        run: trivy fs --format table -o fs-report.json .

      - name: Install Gitleaks
        run: sudo apt install gitleaks -y

      - name: Gitleaks Code Scan
        run: gitleaks detect --source . -r gitleaks-report.json -f json

  test:
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run Unit Tests
        run: mvn test

  build_project_and_sonar_scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Project
        run: mvn package

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

      - name: Checkout again (for sonar full git history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  build_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: build_project_and_sonar_scan
    steps:
      - uses: actions/checkout@v4

      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: app

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: prashant0597/github-actions-app:latest
          file: ./Dockerfile

  deploy_to_eks:
    runs-on: ubuntu-latest
    needs: build_docker_image_and_push
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config

      - name: Deploy with Helm
        run: helm upgrade --install github-actions-app ${{ env.HELM_CHART_PATH }} --namespace default

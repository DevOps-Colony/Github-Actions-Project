name: Deploy to Staging

on:
  workflow_run:
    workflows: ["Infrastructure Deployment"]  # Must match exactly the `name:` in infrastructure.yml
    types:
      - completed
  workflow_dispatch:  # Optional: allow manual trigger

permissions:
  contents: read
  security-events: write  

env:
  AWS_REGION: ap-south-1
  ENVIRONMENT: staging
  JAVA_VERSION: '17'
  ECR_REPOSITORY: bankapp
  EKS_CLUSTER_NAME: bankapp-staging-cluster

jobs:
  test-and-security:
    name: Test & Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven


    - name: Verify mvnw exists
      run: ls -l mvnw
    - name: Make mvnw executable
      run: chmod +x mvnw
    - name: Run tests
      run: ./mvnw clean package -DskipTests

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Package application
      run: ./mvnw clean package -DskipTests

    - name: Build Docker image for security scan
      run: docker build -t bankapp:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'bankapp:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build & Deploy to Staging
    runs-on: ubuntu-latest
    needs: test-and-security
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get infrastructure outputs
      id: terraform-outputs
      run: |
        cd infra/environments/${{ env.ENVIRONMENT }}
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
        echo "load_balancer_dns=$(terraform output -raw load_balancer_dns)" >> $GITHUB_OUTPUT

    - name: Build application
      run: ./mvnw clean package -DskipTests

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    

    - name: Ensure ECR repository exists
      run: |
       aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
       aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION


    - name: Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: bankapp
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest .
        
        # Push Docker image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:staging-latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.terraform-outputs.outputs.eks_cluster_id }}

    - name: Create staging namespace
      run: |
        kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy with Kustomize
      run: |
        # Update image in kustomization
        cd k8s/overlays/staging
        
        # Replace ACCOUNT_ID with actual account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        sed -i "s/ACCOUNT_ID/$ACCOUNT_ID/g" kustomization.yaml
        
        # Update image tag
        kustomize edit set image bankapp=${{ steps.build-image.outputs.image }}
        
        # Apply manifests
        kubectl apply -k . -n staging

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/bankapp -n staging --timeout=300s

    - name: Get application URL
      id: app-url
      run: |
        LOAD_BALANCER_DNS=${{ steps.terraform-outputs.outputs.load_balancer_dns }}
        echo "application_url=http://$LOAD_BALANCER_DNS" >> $GITHUB_OUTPUT

    - name: Run smoke tests
      run: |
        echo "Waiting for application to be ready..."
        sleep 30
        
        APP_URL=${{ steps.app-url.outputs.application_url }}
        
        # Health check
        if curl -f "$APP_URL/actuator/health" | grep -q "UP"; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          exit 1
        fi

    - name: Summary
      run: |
        echo "## 🚀 Staging Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Deployment Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image:** ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **EKS Cluster:** ${{ steps.terraform-outputs.outputs.eks_cluster_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Application URL:** ${{ steps.app-url.outputs.application_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Smoke Tests:" >> $GITHUB_STEP_SUMMARY
        echo "- Health Check: ✅ Passed" >> $GITHUB_STEP_SUMMARY
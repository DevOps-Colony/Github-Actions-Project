name: Deploy to Production

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'infra/**'
      - '.github/workflows/infrastructure.yml'
      - 'README.md'
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ENVIRONMENT: production
  JAVA_VERSION: '17'

jobs:
  test-and-security:
    name: Test & Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Run tests
      run: ./mvnw clean test

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}




    - name: SonarCloud Quality Gate Check
      uses: SonarSource/sonarcloud-github-action@master
      with:
        args: -Dsonar.qualitygate.wait=true
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      timeout-minutes: 5


    - name: Package application
      run: ./mvnw clean package -DskipTests

    - name: Build Docker image for security scan
      run: docker build -t bankapp:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'bankapp:security-scan'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  build-and-deploy:
    name: Build & Deploy to Production
    runs-on: ubuntu-latest
    needs: test-and-security
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get infrastructure outputs
      id: terraform-outputs
      run: |
        cd infra/environments/${{ env.ENVIRONMENT }}
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
        echo "load_balancer_dns=$(terraform output -raw load_balancer_dns)" >> $GITHUB_OUTPUT

    - name: Build application
      run: ./mvnw clean package -DskipTests

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: bankapp
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:production-latest .
        
        # Push Docker image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:production-latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.terraform-outputs.outputs.eks_cluster_name }}

    - name: Create production namespace
      run: |
        kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -

    - name: Setup Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Deploy with Helm (Production)
      run: |
        # Update values file with actual account ID and image
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Create temporary values file
        cat helm/bankapp/values-production.yaml | \
        sed "s/ACCOUNT_ID/$ACCOUNT_ID/g" | \
        sed "s/production-latest/${{ github.sha }}/g" > values-production-temp.yaml
        
        # Deploy with Helm
        helm upgrade --install bankapp-production helm/bankapp \
          --values values-production-temp.yaml \
          --namespace production \
          --wait \
          --timeout=10m

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/bankapp-production -n production --timeout=600s

    - name: Get application URL
      id: app-url
      run: |
        LOAD_BALANCER_DNS=${{ steps.terraform-outputs.outputs.load_balancer_dns }}
        echo "application_url=http://$LOAD_BALANCER_DNS" >> $GITHUB_OUTPUT

    - name: Run comprehensive tests
      run: |
        echo "Waiting for application to be ready..."
        sleep 60
        
        APP_URL=${{ steps.app-url.outputs.application_url }}
        
        # Health check
        echo "🔍 Running health check..."
        if curl -f "$APP_URL/actuator/health" | grep -q "UP"; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          exit 1
        fi
        
        # Info endpoint
        echo "🔍 Checking info endpoint..."
        if curl -f "$APP_URL/actuator/info" >/dev/null 2>&1; then
          echo "✅ Info endpoint accessible"
        else
          echo "❌ Info endpoint not accessible"
          exit 1
        fi
        
        # Load test (basic)
        echo "🔍 Running basic load test..."
        for i in {1..10}; do
          if ! curl -f "$APP_URL/actuator/health" >/dev/null 2>&1; then
            echo "❌ Load test failed on request $i"
            exit 1
          fi
        done
        echo "✅ Basic load test passed"

    - name: Summary
      run: |
        echo "## 🚀 Production Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Deployment Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image:** ${{ steps.build-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **EKS Cluster:** ${{ steps.terraform-outputs.outputs.eks_cluster_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Application URL:** ${{ steps.app-url.outputs.application_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Tests Passed:" >> $GITHUB_STEP_SUMMARY
        echo "- Health Check: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Info Endpoint: ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Basic Load Test: ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🌐 **[Access Production Application](${{ steps.app-url.outputs.application_url }})**"
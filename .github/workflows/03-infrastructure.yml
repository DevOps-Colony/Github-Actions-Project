name: Infrastructure Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
      - '.github/workflows/03-infrastructure.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'infra/**'
      - '.github/workflows/03-infrastructure.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options: [ staging, production ]

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'ap-south-1' }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME || 'bankapp' }}
  TF_VERSION: "1.5.0"

permissions:
  id-token: write
  contents: read

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Determine environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  terraform:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Initialize S3 Backend and DynamoDB
        working-directory: ./infra/modules/backend
        run: |
          terraform init
          terraform plan -out=tfplan \
            -var="project_name=${{ env.PROJECT_NAME }}" \
            -var="environment=${{ needs.determine-environment.outputs.environment }}"
          terraform apply -auto-approve tfplan

      - name: Generate Backend Config
        id: backend
        run: |
          STATE_BUCKET="${{ env.PROJECT_NAME }}-terraform-state-${{ needs.determine-environment.outputs.environment }}"
          LOCK_TABLE="${{ env.PROJECT_NAME }}-terraform-locks-${{ needs.determine-environment.outputs.environment }}"
          
          echo "bucket=${STATE_BUCKET}" > backend.hcl
          echo "key=terraform.tfstate" >> backend.hcl
          echo "region=${{ env.AWS_REGION }}" >> backend.hcl
          echo "dynamodb_table=${LOCK_TABLE}" >> backend.hcl
          echo "encrypt=true" >> backend.hcl

      - name: Terraform Init Main Infrastructure
        working-directory: ./infra
        run: |
          terraform init -backend-config=../backend.hcl

      - name: Terraform Plan
        working-directory: ./infra
        id: plan
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_environment: ${{ needs.determine-environment.outputs.environment }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: |
          terraform plan -out=tfplan \
            -var="grafana_admin_password=${{ secrets.GRAFANA_ADMIN_PASSWORD }}"

      - name: Terraform Apply
        if: github.event_name != 'pull_request'
        working-directory: ./infra
        env:
          TF_VAR_project_name: ${{ env.PROJECT_NAME }}
          TF_VAR_environment: ${{ needs.determine-environment.outputs.environment }}
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: terraform apply -auto-approve tfplan

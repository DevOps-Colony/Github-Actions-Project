name: Infrastructure Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: us-west-2
  TF_VERSION: 1.8.5

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
    - name: Determine environment
      id: set-env
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

  stage-1-aws-infrastructure:
    name: Deploy AWS Infrastructure (Stage 1)
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    defaults:
      run:
        working-directory: ./infra/stage-1-aws
    
    outputs:
      cluster-name: ${{ steps.outputs.outputs.cluster_name }}
      ecr-repository-url: ${{ steps.outputs.outputs.ecr_repository_url }}
      load-balancer-dns: ${{ steps.outputs.outputs.load_balancer_dns }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Terraform Init (Stage 1)
      run: terraform init -reconfigure

    # Script for ECR import
    - name: Import existing ECR repo if it exists
      run: bash ../../.github/scripts/terraform-import/import-ecr.sh "bankapp" "${{ env.AWS_REGION }}" "./infra/stage-1-aws"

    # Script for Target Group import
    - name: Import ALB Target Group if it exists
      run: bash ../../.github/scripts/terraform-import/import-tg.sh "bankapp-${{ needs.determine-environment.outputs.environment }}-tg" "${{ env.AWS_REGION }}" "./infra/stage-1-aws"

    # Script for IAM Role import
    - name: Import IAM Role if it exists
      run: bash ../../.github/scripts/terraform-import/import-iam-role.sh "bankapp-${{ needs.determine-environment.outputs.environment }}-cluster-role" "module.eks.aws_iam_role.cluster" "./infra/stage-1-aws"

    # Script for RDS Subnet Group import
    - name: Import RDS Subnet Group if it exists
      run: bash ../../.github/scripts/terraform-import/import-rds-subnet-group.sh "bankapp-${{ needs.determine-environment.outputs.environment }}-db-subnet-group" "module.rds.aws_db_subnet_group.main" "./infra/stage-1-aws"

    # Script for Force Unlock
    - name: Check & force unlock state Terraform lock
      if: always()
      run: bash ../../.github/scripts/terraform-import/force-unlock.sh "terraform-state-lock-${{ needs.determine-environment.outputs.environment }}" "${{ env.AWS_REGION }}"

    - name: Terraform Plan (Stage 1)
      id: plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply (Stage 1)
      if: steps.plan.outcome == 'success'
      run: terraform apply -auto-approve tfplan

    - name: Get Stage 1 Outputs
      id: outputs
      working-directory: ./infra/stage-1-aws
      run: |
        terraform init -reconfigure \
          -backend-config="bucket=bankapp-terraform-state-2024" \
          -backend-config="key=stage-1/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=terraform-state-lock"
        echo "cluster_name=$(terraform output -raw eks_cluster_id)" >> $GITHUB_OUTPUT
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "load_balancer_dns=$(terraform output -raw load_balancer_dns)" >> $GITHUB_OUTPUT

  stage-2-kubernetes:
    name: Deploy Kubernetes Resources (Stage 2)
    runs-on: ubuntu-latest
    needs: stage-1-aws-infrastructure
    defaults:
      run:
        working-directory: ./infra/stage-2-kubernetes
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Wait for EKS cluster to be active
      run: |
        aws eks wait cluster-active \
          --name ${{ needs.stage-1-aws-infrastructure.outputs.cluster-name }} \
          --region ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: aws eks update-kubeconfig \
        --region ${{ env.AWS_REGION }} \
        --name ${{ needs.stage-1-aws-infrastructure.outputs.cluster-name }}

    - name: Create AWS Load Balancer Controller IAM Policy
      run: |
        POLICY_ARN="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/AWSLoadBalancerControllerIAMPolicy"
        if ! aws iam get-policy --policy-arn "$POLICY_ARN" >/dev/null 2>&1; then
          curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.7.2/docs/install/iam_policy.json
          aws iam create-policy \
            --policy-name AWSLoadBalancerControllerIAMPolicy \
            --policy-document file://iam_policy.json
        fi

    - name: Terraform Init (Stage 2)
      run: terraform init

    - name: Terraform Plan (Stage 2)
      run: terraform plan -out=tfplan

    - name: Terraform Apply (Stage 2)
      run: terraform apply -auto-approve tfplan

name: Infrastructure Deployment

on:
  push:
    branches: [ main, develop ]   # run for any push to main or develop
  pull_request:
    branches: [ main, develop ]   # run on PRs to main or develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: us-west-2
  TF_VERSION: 1.6.0

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
    - name: Determine environment
      id: set-env
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    defaults:
      run:
        working-directory: ./infra/environments/${{ needs.determine-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create S3 backend bucket if not exists
      run: |
        BUCKET_NAME="bankapp-terraform-state-${{ needs.determine-environment.outputs.environment }}-2024"
        echo "Checking if bucket $BUCKET_NAME exists..."
        
        if ! aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
          echo "Bucket already exists"
        else
          echo "Creating S3 bucket for Terraform state..."
          aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }}
          
          aws s3api put-bucket-versioning \
            --bucket $BUCKET_NAME \
            --versioning-configuration Status=Enabled
          
          aws s3api put-bucket-encryption \
            --bucket $BUCKET_NAME \
            --server-side-encryption-configuration '{
              "Rules": [
                {
                  "ApplyServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            }'
        fi

    - name: Create DynamoDB lock table if not exists
      run: |
        LOCK_TABLE_NAME="terraform-state-lock-${{ needs.determine-environment.outputs.environment }}"
        echo "Checking if DynamoDB table $LOCK_TABLE_NAME exists..."
        
        if ! aws dynamodb describe-table --table-name "$LOCK_TABLE_NAME" >/dev/null 2>&1; then
          echo "Creating DynamoDB table for Terraform state lock..."
          aws dynamodb create-table \
            --table-name "$LOCK_TABLE_NAME" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
        else
          echo "DynamoDB lock table already exists."
        fi


    - name: Terraform Init
      run: terraform init


    - name: Check & force unlock stale state lock (staging only)
      if: needs.determine-environment.outputs.environment == 'staging'
      run: |
        echo "Checking for stale Terraform locks in DynamoDB..."
        
        LOCK_ID=$(aws dynamodb scan \
          --table-name terraform-state-lock-${{ needs.determine-environment.outputs.environment }} \
          --region ${{ env.AWS_REGION }} \
          --query "Items[].LockID.S" \
          --output text)
        
        if [ -n "$LOCK_ID" ]; then
          echo "Found lock ID: $LOCK_ID â€” forcing unlock..."
          terraform force-unlock -force "$LOCK_ID" || true
        else
          echo "No lock found, continuing..."
        fi


    - name: Terraform Plan
      id: plan
      run: terraform plan -out=tfplan

    - name: Terraform Apply
      if: steps.plan.outcome == 'success' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      run: terraform apply -auto-approve tfplan

    - name: Get Infrastructure Outputs
      id: outputs
      run: |
        echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
        echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
        echo "load_balancer_dns=$(terraform output -raw load_balancer_dns)" >> $GITHUB_OUTPUT

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.outputs.outputs.eks_cluster_name }}

    - name: Install AWS Load Balancer Controller
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
          -n kube-system \
          --set clusterName=${{ steps.outputs.outputs.eks_cluster_name }} \
          --set serviceAccount.create=true \
          --set serviceAccount.name=aws-load-balancer-controller \
          --set region=${{ env.AWS_REGION }} \
          --wait || true